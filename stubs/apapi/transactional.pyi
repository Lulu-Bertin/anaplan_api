from .basic_connection import BasicConnection as BasicConnection
from .utils import ENCODING_GZIP as ENCODING_GZIP, ExportType as ExportType, MIMEType as MIMEType, PAGING_LIMIT as PAGING_LIMIT
from requests import Response
from typing import Iterable

class TransactionalConnection(BasicConnection):
    def get_users(self) -> Response: ...
    def get_me(self) -> Response: ...
    def get_user(self, user_id: str) -> Response: ...
    def get_workspace_users(self, workspace_id: str) -> Response: ...
    def get_workspace_admins(self, workspace_id: str) -> Response: ...
    def get_model_users(self, model_id: str) -> Response: ...
    def get_workspaces(self, details: bool = None) -> Response: ...
    def get_workspace(self, workspace_id: str, details: bool = None) -> Response: ...
    def get_user_workspaces(self, user_id: str) -> Response: ...
    def get_models(self, details: bool = None) -> Response: ...
    def get_workspace_models(self, workspace_id: str, details: bool = None) -> Response: ...
    def get_model(self, model_id: str, details: bool = None) -> Response: ...
    def get_user_models(self, user_id: str) -> Response: ...
    def delete_models(self, workspace_id: str, models_ids: [str]) -> Response: ...
    def get_fiscal_year(self, model_id: str): ...
    def set_fiscal_year(self, model_id: str, data: str): ...
    def get_current_period(self, model_id: str): ...
    def set_current_period(self, model_id: str, data: str): ...
    def get_versions(self, model_id: str): ...
    def set_version_switchover(self, model_id: str, version_id: str, data: str): ...
    def get_lists(self, model_id: str) -> Response: ...
    def get_list(self, model_id: str, list_id: str) -> Response: ...
    def get_list_items(self, model_id: str, list_id: str, details: bool = None, accept: MIMEType = None) -> Response: ...
    def start_large_list_read(self, model_id: str, list_id: str) -> Response: ...
    def get_large_list_read_status(self, model_id: str, list_id: str, request_id: str) -> Response: ...
    def get_large_list_read_data(self, model_id: str, list_id: str, request_id: str, page: str, compress: bool = None) -> Response: ...
    def delete_large_list_read(self, model_id: str, list_id: str, request_id: str) -> Response: ...
    def add_list_items(self, model_id: str, list_id: str, data: list[dict]) -> Response: ...
    def update_list_items(self, model_id: str, list_id: str, data: list[dict]) -> Response: ...
    def delete_list_items(self, model_id: str, list_id: str, data: list[dict]) -> Response: ...
    def reset_list_index(self, model_id: str, list_id: str) -> Response: ...
    def get_modules(self, model_id: str) -> Response: ...
    def get_lineitems(self, model_id: str, details: bool = None) -> Response: ...
    def get_module_lineitems(self, model_id: str, module_id: str, details: bool = None) -> Response: ...
    def get_views(self, model_id: str, details: bool = None) -> Response: ...
    def get_module_views(self, model_id: str, module_id: str, details: bool = None) -> Response: ...
    def get_view_dimensions(self, model_id: str, view_id: str) -> Response: ...
    def get_dimension_items(self, model_id: str, dimension_id: str) -> Response: ...
    def get_lineitem_dimensions(self, model_id: str, lineitem_id: str) -> Response: ...
    def get_lineitem_dimension_items(self, model_id: str, lineitem_id: str, dimension_id: str) -> Response: ...
    def get_view_dimension_items(self, model_id: str, view_id: str, dimension_id: str) -> Response: ...
    def check_dimension_items_id(self, model_id: str, dimension_id: str, data: dict) -> Response: ...
    def get_cell_data(self, model_id: str, view_id: str, accept: MIMEType = None, pages: Iterable[str] = None) -> Response: ...
    def start_large_cell_read(self, model_id: str, view_id: str, mode: ExportType) -> Response: ...
    def get_large_cell_read_status(self, model_id: str, view_id: str, request_id: str) -> Response: ...
    def get_large_cell_read_data(self, model_id: str, view_id: str, request_id: str, page: str, compress: bool = None) -> Response: ...
    def delete_large_cell_read(self, model_id: str, view_id: str, request_id: str) -> Response: ...
    def post_cell_data(self, model_id: str, module_id: str, data: list[dict]) -> Response: ...
